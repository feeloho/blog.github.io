<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[openVPN安装及使用]]></title>
    <url>%2F2020%2F04%2F08%2FopenVPN%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[OpenVPN 是一个基于 OpenSSL 库的应用层 VPN 实现。和传统 VPN 相比，它的优点是简单易用。 OpenVPN允许参与建立VPN的单点使用共享金钥，电子证书，或者用户名/密码来进行身份验证。它大量使用了OpenSSL加密库中的SSLv3/TLSv1 协议函式库。OpenVPN能在Solaris、Linux、OpenBSD、FreeBSD、NetBSD、Mac OS X与Windows 2000/XP/Vista上运行，并包含了许多安全性的功能。它并不是一个基于Web的VPN软件，也不与IPsec及其他VPN软件包兼容。 Server端环境 Centos7 OpenVPN 版本：2.4.7 easy-rsa 版本：3.0.3 yum安装OpenVPN首先从yum安装OpenVPN及证书生成工具Easy-Rsa：1yum install openvpn easy-rsa 从示例配置文件复制一份配置文件到/etc/openvpn123cp /usr/share/doc/openvpn-*/sample/sample-config-files/server.conf /etc/openvpn/server.confcp /usr/share/doc/openvpn-*/sample/sample-config-files/server.conf /etc/openvpn/server.conf_bakcp /usr/share/doc/openvpn-*/sample/sample-config-files/client.conf /etc/openvpn/client.conf_bak 使用easy-rsa生成证书及密钥完成了对于配置文件的修改之后，我们接下来生成keys和certificates。 yum安装完后有关的文件都在/usr/share/easy-rsa/2.0/ 这个目录中。 1cd /usr/share/easy-rsa/2.0/ vars脚本, 是用来创建环境变量,设置所需要要的变量的脚本 clean-all脚本,是创建生成ca证书及密钥文件所需要的文件及目录 build-ca脚本, 生成ca证书(交互) build-dh脚本, 生成Diffie-Hellman文件(交互) build-key-server脚本, 生成服务器端密钥(交互) build-key脚本, 生成客户端密钥(交互) pkitool脚本,直接使用vars的环境变量设置,直接生成证书(非交互) 初始化PKI配置首先需要修改的是vars文件1vim vars 将以下这些值修改成你自己的值123456789export KEY_SIZE=2048 //生成密钥的位数export KEY_COUNTRY="CN" //你所在国家码，2个字符export KEY_PROVINCE="GD" //你所在省份export KEY_CITY="SHENZHEN" //你所在城市export KEY_ORG="CESHI" //你所在组织export KEY_EMAIL="admin@ceshi.com" //你的邮箱地址export KEY_CN=ceshi //随意export KEY_NAME=ceshi //随意export KEY_OU=CESHI //你所在的单位 修改完成之后，执行 source ./vars, 清空目录并生成 Certificate Authority(CA):1source ./vars 创建生成ca证书及密钥文件所需要的文件及目录并创建证书12./clean-all./build-ca 执行完成之后在/usr/share/easy-rsa/2.0/keys目录中产生了CA正式的相关文件。 接下来为服务器生成证书及密钥1./build-key-server server 再生成Diffie Hellman key exchange文件，这里生成的长度由之前的KEY_SIZE决定：1./build-dh 执行完成会产生dh2048.pem (如果你的KEY_SIZE =1024，这里产生的文件是dh1024.pem) 生成TLS-auth密钥，OpenVPN提供了TLS-auth功能，可以用来抵御Dos、UDP端口淹没攻击。1openvpn --genkey --secret keys/ta.key 生成证书吊销链文件防止日后有人丢失证书被非法用户接入VPN1./make-crl vpncrl.pem 生成客户端证书及密钥1./build-key client 生成证书吊销链文件防止日后有人丢失证书被非法用户接入VPN12./make-crl vpncrl.pemUsing configuration from /etc/openvpn/openssl.cnf 将7个所需文件复制到OpenVPN配置目录中去：12mkdir /etc/openvpn/keys/cp ca.crt server.crt server.key dh2048.pem ta.key client.crt client.key vpncrl.pem /etc/openvpn/keys 配置OpenVPN打开 /etc/openvpn/server.conf 编辑： 1vim /etc/openvpn/server.conf 根据需求调整相应的配置项： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329################################################## Sample OpenVPN 2.0 config file for ## multi-client server. ## ## This file is for the server side ## of a many-clients &lt;-&gt; one-server ## OpenVPN configuration. ## ## OpenVPN also supports ## single-machine &lt;-&gt; single-machine ## configurations (See the Examples page ## on the web site for more info). ## ## This config should work on Windows ## or Linux/BSD systems. Remember on ## Windows to quote pathnames and use ## double backslashes, e.g.: ## "C:\\Program Files\\OpenVPN\\config\\foo.key" ## ## Comments are preceded with '#' or ';' ################################################## # Which local IP address should OpenVPN# listen on? (optional);local a.b.c.d //设置服务器监听地址，默认全部 # Which TCP/UDP port should OpenVPN listen on?# If you want to run multiple OpenVPN instances# on the same machine, use a different port# number for each one. You will need to# open up this port on your firewall.port 1194 //设置服务器监听端口，默认1194 # TCP or UDP server?;proto tcp //设置连接协议，TCP/UDP二选一proto udp # "dev tun" will create a routed IP tunnel,# "dev tap" will create an ethernet tunnel.# Use "dev tap0" if you are ethernet bridging# and have precreated a tap0 virtual interface# and bridged it with your ethernet interface.# If you want to control access policies# over the VPN, you must create firewall# rules for the the TUN/TAP interface.# On non-Windows systems, you can give# an explicit unit number, such as tun0.# On Windows, use "dev-node" for this.# On most systems, the VPN will not function# unless you partially or fully disable# the firewall for the TUN/TAP interface.;dev tap //创建的通信隧道类型，可选tun或tapdev tun # Windows needs the TAP-Win32 adapter name# from the Network Connections panel if you# have more than one. On XP SP2 or higher,# you may need to selectively disable the# Windows firewall for the TAP adapter.# Non-Windows systems usually don't need this.;dev-node MyTap //Windows下TAP适配器名称，默认可不启用 # SSL/TLS root certificate (ca), certificate# (cert), and private key (key). Each client# and the server must have their own cert and# key file. The server and all clients will# use the same ca file.## See the "easy-rsa" directory for a series# of scripts for generating RSA certificates# and private keys. Remember to use# a unique Common Name for the server# and each of the client certificates.## Any X509 key management system can be used.# OpenVPN can also use a PKCS #12 formatted key file# (see "pkcs12" directive in man page).ca ca.crt //指定CA证书的文件路径cert server.crt //指定服务器端的证书文件路径key server.key # This file should be kept secret //指定服务器端的私钥文件路径 # Diffie hellman parameters.# Generate your own with:# openssl dhparam -out dh2048.pem 2048dh dh2048.pem //指定迪菲赫尔曼参数的文件路径 # Network topology# Should be subnet (addressing via IP)# unless Windows clients v2.0.9 and lower have to# be supported (then net30, i.e. a /30 per client)# Defaults to net30 (not recommended);topology subnet # Configure server mode and supply a VPN subnet# for OpenVPN to draw client addresses from.# The server will take 10.8.0.1 for itself,# the rest will be made available to clients.# Each client will be able to reach the server# on 10.8.0.1. Comment this line out if you are# ethernet bridging. See the man page for more info.server 10.8.0.0 255.255.255.0 //指定虚拟局域网占用的IP地址段和子网掩码，此处配置的服务器自身占用10.0.0.1。 # Maintain a record of client &lt;-&gt; virtual IP address# associations in this file. If OpenVPN goes down or# is restarted, reconnecting clients can be assigned# the same virtual IP address from the pool that was# previously assigned.ifconfig-pool-persist ipp.txt //服务器自动给客户端分配IP后，客户端下次连接时，仍然采用上次的IP地址(第一次分配的IP保存在ipp.txt中，下一次分配其中保存的IP)。 # Configure server mode for ethernet bridging.# You must first use your OS's bridging capability# to bridge the TAP interface with the ethernet# NIC interface. Then you must manually set the# IP/netmask on the bridge interface, here we# assume 10.8.0.4/255.255.255.0. Finally we# must set aside an IP range in this subnet# (start=10.8.0.50 end=10.8.0.100) to allocate# to connecting clients. Leave this line commented# out unless you are ethernet bridging.;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100 //设置桥接模式下的IP地址 # Configure server mode for ethernet bridging# using a DHCP-proxy, where clients talk# to the OpenVPN server-side DHCP server# to receive their IP address allocation# and DNS server addresses. You must first use# your OS's bridging capability to bridge the TAP# interface with the ethernet NIC interface.# Note: this mode only works on clients (such as# Windows), where the client-side TAP adapter is# bound to a DHCP client.;server-bridge //设置服务器模式 # Push routes to the client to allow it# to reach other private subnets behind# the server. Remember that these# private subnets will also need# to know to route the OpenVPN client# address pool (10.8.0.0/255.255.255.0)# back to the OpenVPN server.;push "route 192.168.10.0 255.255.255.0" //设置需要推送到客户端的路由表;push "route 192.168.20.0 255.255.255.0";push “route remote_host 255.255.255.255 net_gateway” //设置VPN服务器本身要通过客户端原来的网关访问(取消redirect-gateway def1 bypass-dhcp选项后这项必须开启，否则无法访问OpenVPN服务器) # To assign specific IP addresses to specific# clients or if a connecting client has a private# subnet behind it that should also have VPN access,# use the subdirectory "ccd" for client-specific# configuration files (see man page for more info). # EXAMPLE: Suppose the client# having the certificate common name "Thelonious"# also has a small subnet behind his connecting# machine, such as 192.168.40.128/255.255.255.248.# First, uncomment out these lines:;client-config-dir ccd;route 192.168.40.128 255.255.255.248# Then create a file ccd/Thelonious with this line:# iroute 192.168.40.128 255.255.255.248# This will allow Thelonious' private subnet to# access the VPN. This example will only work# if you are routing, not bridging, i.e. you are# using "dev tun" and "server" directives. # EXAMPLE: Suppose you want to give# Thelonious a fixed VPN IP address of 10.9.0.1.# First uncomment out these lines:;client-config-dir ccd;route 10.9.0.0 255.255.255.252# Then add this line to ccd/Thelonious:# ifconfig-push 10.9.0.1 10.9.0.2 # Suppose that you want to enable different# firewall access policies for different groups# of clients. There are two methods:# (1) Run multiple OpenVPN daemons, one for each# group, and firewall the TUN/TAP interface# for each group/daemon appropriately.# (2) (Advanced) Create a script to dynamically# modify the firewall in response to access# from different clients. See man# page for more info on learn-address script.;learn-address ./script # If enabled, this directive will configure# all clients to redirect their default# network gateway through the VPN, causing# all IP traffic such as web browsing and# and DNS lookups to go through the VPN# (The OpenVPN server machine may need to NAT# or bridge the TUN/TAP interface to the internet# in order for this to work properly).;push "redirect-gateway def1 bypass-dhcp" //设置默认客户端默认网关 # Certain Windows-specific network settings# can be pushed to clients, such as DNS# or WINS server addresses. CAVEAT:# http://openvpn.net/faq.html#dhcpcaveats# The addresses below refer to the public# DNS servers provided by opendns.com.;push "dhcp-option DNS 208.67.222.222" //设置客户端DNS;push "dhcp-option DNS 208.67.220.220" # Uncomment this directive to allow different# clients to be able to "see" each other.# By default, clients will only see the server.# To force clients to only see the server, you# will also need to appropriately firewall the# server's TUN/TAP interface.;client-to-client //设置客户端是否可以访问客户端 # Uncomment this directive if multiple clients# might connect with the same certificate/key# files or common names. This is recommended# only for testing purposes. For production use,# each client should have its own certificate/key# pair.## IF YOU HAVE NOT GENERATED INDIVIDUAL# CERTIFICATE/KEY PAIRS FOR EACH CLIENT,# EACH HAVING ITS OWN UNIQUE "COMMON NAME",# UNCOMMENT THIS LINE OUT.;duplicate-cn //如果客户端都使用相同的证书和密钥连接VPN，一定要打开这个选项，否则每个证书只允许一个人连接VPN # The keepalive directive causes ping-like# messages to be sent back and forth over# the link so that each side knows when# the other side has gone down.# Ping every 10 seconds, assume that remote# peer is down if no ping received during# a 120 second time period.keepalive 10 120 //每10秒ping一次，连接超时时间设为120秒。 # For extra security beyond that provided# by SSL/TLS, create an "HMAC firewall"# to help block DoS attacks and UDP port flooding.## Generate with:# openvpn --genkey --secret ta.key## The server and each client must have# a copy of this key.# The second parameter should be '0'# on the server and '1' on the clients.tls-auth ta.key 0 # This file is secret //开启TLS-auth，使用ta.key防御攻击。服务器端的第二个参数值为0，客户端的为1。 # Select a cryptographic cipher.# This config item must be copied to# the client config file as well.# Note that 2.4 client/server will automatically# negotiate AES-256-GCM in TLS mode.# See also the ncp-cipher option in the manpagecipher AES-256-CBC //指定数据对称加密算法 # Enable compression on the VPN link and push the# option to the client (2.4+ only, for earlier# versions see below);compress lz4-v2;push "compress lz4-v2" # For compression compatible with older clients use comp-lzo# If you enable it here, you must also# enable it in the client config file.;comp-lzo //开启VPN连接压缩，如果服务器端开启，客户端也必须开启 # The maximum number of concurrently connected# clients we want to allow.;max-clients 100 # It's a good idea to reduce the OpenVPN# daemon's privileges after initialization.## You can uncomment this out on# non-Windows systems.;user nobody //设置运行账户及组;group nobody # The persist options will try to avoid# accessing certain resources on restart# that may no longer be accessible because# of the privilege downgrade.persist-key //持久化选项可以尽量避免访问在重启时由于用户权限降低而无法访问的某些资源。persist-tun # Output a short status file showing# current connections, truncated# and rewritten every minute.status openvpn-status.log //设置启动日志 # By default, log messages will go to the syslog (or# on Windows, if running as a service, they will go to# the "\Program Files\OpenVPN\log" directory).# Use log or log-append to override this default.# "log" will truncate the log file on OpenVPN startup,# while "log-append" will append to it. Use one# or the other (but not both).;log openvpn.log //设置运行日志;log-append openvpn.log # Set the appropriate level of log# file verbosity.## 0 is silent, except for fatal errors# 4 is reasonable for general usage# 5 and 6 can help to debug connection problems# 9 is extremely verboseverb 3 //设置日志记录级别（0-9） # Silence repeating messages. At most 20# sequential messages of the same message# category will be output to the log.;mute 20 //设置重复消息 # Notify the client that when the server restarts so it# can automatically reconnect.explicit-exit-notify 1 //设置断线重连功能 crl-verify /etc/openvpn/keys/vpncrl.pem //用于注销已删除用户的key # 使用Linux系统账户登录VPN;plugin /usr/lib64/openvpn/plugins/openvpn-plugin-auth-pam.so login # login为指定使用linux本身认证;client-cert-not-required #取消证书认证;username-as-common-name #使用客户提供的UserName作为Common Name # 使用脚本验证用户名密码登录VPN;script-security 3 #OpenVPN使用外部程序和脚本的策略级控制;auth-user-pass-verify /usr/local/openvpn/etc/checkpsw.sh via-env #设置脚本;client-cert-not-required #取消证书认证;username-as-common-name #使用客户提供的UserName作为Common Name 附checkpsw.sh脚本代码 12345678910111213141516171819202122232425262728293031323334353637383940#!/bin/sh ########################################################### # checkpsw.sh (C) 2004 Mathias Sundman &lt;mathias@openvpn.se&gt; # # This script will authenticate OpenVPN users against # a plain text file. The passfile should simply contain # one row per user with the username first followed by # one or more space(s) or tab(s) and then the password. PASSFILE="/etc/openvpn/psw-file" LOG_FILE="/var/log/openvpn-password.log" TIME_STAMP=`date "+%Y-%m-%d %T"` ########################################################### if [ ! -r "$&#123;PASSFILE&#125;" ]; then echo "$&#123;TIME_STAMP&#125;: Could not open password file \"$&#123;PASSFILE&#125;\" for reading." &gt;&gt; $&#123;LOG_FILE&#125; exit 1 fi CORRECT_PASSWORD=`awk '!/^;/&amp;&amp;!/^#/&amp;&amp;$1=="'$&#123;username&#125;'"&#123;print $2;exit&#125;' $&#123;PASSFILE&#125;` if [ "$&#123;CORRECT_PASSWORD&#125;" = "" ]; then echo "$&#123;TIME_STAMP&#125;: User does not exist: username=\"$&#123;username&#125;\", password= \"$&#123;password&#125;\"." &gt;&gt; $&#123;LOG_FILE&#125; exit 1 fi if [ "$&#123;password&#125;" = "$&#123;CORRECT_PASSWORD&#125;" ]; then echo "$&#123;TIME_STAMP&#125;: Successful authentication: username=\"$&#123;username&#125;\"." &gt;&gt; $&#123;LOG_FILE&#125; exit 0 fi echo "$&#123;TIME_STAMP&#125;: Incorrect password: username=\"$&#123;username&#125;\", password= \"$&#123;password&#125;\"." &gt;&gt; $&#123;LOG_FILE&#125; exit 1 准备用户名和密码认证文件，用户名和密码用空格隔开，同时确保openvpn启动用户可读取该文件 1234vim psw-filevpnuser 123456 chmod 775 psw-file chown nobody.nobody psw-file 调整系统设置并启动OpenVPN Server防火墙配置在CentOS 7中，iptables防火墙已经被firewalld所取代，需要使用如下方法： 首先启动firewalld 1systemctl status firewalld.service 查看有哪些服务已经在列表中允许通过： 12firewall-cmd --list-servicesdhcpv6-client http https ssh 可以看到已经有了dhcpv6-client, http, https, ssh四项，接下来添加openvpn： 12firewall-cmd --permanent --zone=pupublic --add-service openvpnsuccess 检查一下： 12firewall-cmd --list-servicesdhcpv6-client http https openvpn ssh 最后添加masquerade: 1234firewall-cmd --add-masqueradesuccessfirewall-cmd --permanent --add-masqueradesuccess 以下命令用于确认masquerade是否添加成功： 12firewall-cmd --query-masqueradeyes 允许IP转发在sysctl中开启IP转发 1234vim /etc/sysctl.conf # Controls IP packet forwardingnet.ipv4.ip_forward = 1 启动OpenVPN服务启动OpenVPN服务器并添加自动启动项 12systemctl start openvpn@server.servicesystemctl enable openvpn@server.service 至此服务端搭建完成。 OpenVPN客户端配置客户端配置文件取回之前生成的位于/etc/openvpn/keys中的4个文件： ca.crt client.crt client.key ta.key 在你的客户端创建文件client.ovpn, 将这4个文件与其放在同一目录中，配置client.ovpn内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130############################################### Sample client-side OpenVPN 2.0 config file ## for connecting to multi-client server. ## ## This configuration can be used by multiple ## clients, however each client should have ## its own cert and key files. ## ## On Windows, you might want to rename this ## file so it has a .ovpn extension ############################################### # Specify that we are a client and that we# will be pulling certain config file directives# from the server.client //指定当前VPN是客户端 # Use the same setting as you are using on# the server.# On most systems, the VPN will not function# unless you partially or fully disable# the firewall for the TUN/TAP interface.;dev tap //与服务器端的保持一致dev tun # Windows needs the TAP-Win32 adapter name# from the Network Connections panel# if you have more than one. On XP SP2,# you may need to disable the firewall# for the TAP adapter.;dev-node MyTap //Windows下TAP适配器名称，默认可不启用 # Are we connecting to a TCP or# UDP server? Use the same setting as# on the server.;proto tcp //与服务器端的保持一致proto udp # The hostname/IP and port of the server.# You can have multiple remote entries# to load balance between the servers.remote my-server-1 1194 //指定连接的远程服务器的地址和端口号，端口号与服务器端的保持一致;remote my-server-2 1194 # Choose a random host from the remote# list for load-balancing. Otherwise# try hosts in the order specified.;remote-random # Keep trying indefinitely to resolve the# host name of the OpenVPN server. Very useful# on machines which are not permanently connected# to the internet such as laptops.resolv-retry infinite //断线自动重新连接 # Most clients don't need to bind to# a specific local port number.nobind //不绑定特定的本地端口号 # Downgrade privileges after initialization (non-Windows only);user nobody;group nobody # Try to preserve some state across restarts.persist-key //与服务器端的保持一致persist-tun //与服务器端的保持一致 # If you are connecting through an# HTTP proxy to reach the actual OpenVPN# server, put the proxy server/IP and# port number here. See the man page# if your proxy server requires# authentication.;http-proxy-retry # retry on connection failures //指定HTTP代理;http-proxy [proxy server] [proxy port #] # Wireless networks often produce a lot# of duplicate packets. Set this flag# to silence duplicate packet warnings.;mute-replay-warnings # SSL/TLS parms.# See the server config file for more# description. It's best to use# a separate .crt/.key file pair# for each client. A single ca# file can be used for all clients.ca ca.crt //指定CA证书的文件路径cert client.crt //指定客户端的证书文件路径key client.key //指定客户端的私钥文件路径 # Verify server certificate by checking that the# certicate has the correct key usage set.# This is an important precaution to protect against# a potential attack discussed here:# http://openvpn.net/howto.html#mitm## To use this feature, you will need to generate# your server certificates with the keyUsage set to# digitalSignature, keyEncipherment# and the extendedKeyUsage to# serverAuth# EasyRSA can do this for you.remote-cert-tls server //指定采用服务器校验方式 # If a tls-auth key is used on the server# then every client must also have the key.tls-auth ta.key 1 如果服务器设置了防御DoS等攻击的ta.key，则必须每个客户端开启；如果未设置，则注释掉这一行； # Select a cryptographic cipher.# If the cipher option is used on the server# then you must also specify it here.# Note that 2.4 client/server will automatically# negotiate AES-256-GCM in TLS mode.# See also the ncp-cipher option in the manpagecipher AES-256-CBC //指定数据对称加密算法 # Enable compression on the VPN link.# Don't enable this unless it is also# enabled in the server config file.#comp-lzo //开启VPN连接压缩，与服务器端的保持一致 # Set log file verbosity.verb 3 //设置日志记录级别（0-9） # Silence repeating messages;mute 20 //设置重复消息 # 如服务器上设置了linux系统账户或用户名密码认证则开启auth-user-pass //启用用户名密码登陆认证方式 也可将证书集成到客户端配置文件中，易于使用及传输 1234567891011121314151617181920ca ca.crt 改为：;ca ca.crtcert client.crt 改为：;cert client.crtkey client.key 改为：;key client.keytls-auth ta.key 1 改为：;tls-auth ta.key 1 在最后面添加以下内容：&lt;ca&gt;ca.crt文件内容&lt;/ca&gt; key-direction 1&lt;tls-auth&gt;ta.key文件内容&lt;/tls-auth&gt;&lt;cert&gt;client.crt文件内容&lt;/cert&gt;&lt;key&gt;client.key文件内容&lt;/key&gt; 将client.ovpn文件拷贝到程序目录config下。 右键以管理员身份运行openvpn客户端软件（不以管理员运行可以出现连接后也不能访问的情况）稍后在桌面右下角灰色小图标处右击选择connect即可 Android直接使用OpenVPN官方的OpenVPN Connect即可，选择import导入配置文件。 Mac OS X使用第三方的Tunnelblick连接，注意根据你的操作系统版本选择合适的版本。]]></content>
      <tags>
        <tag>linux</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac使用pyenv管理Python环境]]></title>
    <url>%2F2020%2F03%2F03%2FMac%E4%BD%BF%E7%94%A8pyenv%E7%AE%A1%E7%90%86Python%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[Mac使用pyenv管理Python环境 介绍pyenv 是 Python 版本管理工具。 pyenv 可以改变全局的 Python 版本，安装多个版本的 Python， 设置目录级别的 Python 版本，还能创建和管理 virtual python environments 。所有的设置都是用户级别的操作，不需要 sudo 命令。 pyenv 主要用来管理 Python 的版本，比如一个项目需要 Python 2.x ，一个项目需要 Python 3.x 。 而 virtualenv 主要用来管理 Python 包的依赖，不同项目需要依赖的包版本不同，则需要使用虚拟环境。 pyenv 通过系统修改环境变量来实现 Python 不同版本的切换。而 virtualenv 通过将 Python 包安装到一个目录来作为 Python 包虚拟环境，通过切换目录来实现不同包环境间的切换。 pyenv 的美好之处在于，它并没有使用将不同的 PATH植入不同的shell这种高耦合的工作方式，而是简单地在PATH植入不同的shell这种高耦合的工作方式，而是简单地在PATH 的最前面插入了一个垫片路径（shims）：~/.pyenv/shims:/usr/local/bin:/usr/bin:/bin。所有对 Python 可执行文件的查找都会首先被这个 shims 路径截获，从而使后方的系统路径失效。 pyenv 安装根据官网的 安装说明 或者 自动安装 。 如果使用 Mac 直接使用 Homebrew。安装成功后记得在 .bashrc 或者 .bash_profile 中添加三行来开启自动补全。 123export PATH=&quot;$HOME/.pyenv/bin:$PATH&quot;eval &quot;$(pyenv init -)&quot;eval &quot;$(pyenv virtualenv-init -)&quot; 根据自己的环境配置。 自动安装pyenv 提供了自动安装的工具，执行命令安装即可： 1curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash 保证系统有 git ，否则需要新安装 git。 手动安装如果想要更加详细的了解安装过程，可以使用手动安装。将 pyenv 检出到你想安装的目录。建议路径为：$HOME/.pyenv 123456cd ~git clone git://github.com/yyuu/pyenv.git .pyenvecho &apos;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&apos; &gt;&gt; ~/.bashrcecho &apos;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrcecho &apos;eval &quot;$(pyenv init -)&quot;&apos; &gt;&gt; ~/.bashrcsource ~/.bashrc 添加环境变量。PYENV_ROOT 指向 pyenv 检出的根目录，并向 $PATH 添加 $PYENV_ROOT/bin 以提供访问 pyenv 命令的路径。 这里的 shell 配置文件（~/.bash_profile）依不同 Linux 而需作修改，如果使用 Zsh 则需要相应的配置 ~/.zshrc 在使用 pyenv 之后使用 pip 安装的第三方模块会自动安装到当前使用 python 版本下，不会和系统模块产生冲突。使用 pip 安装模块之后，如果没有生效，记得使用 pyenv rehash 来更新垫片路径。 pyenv 常用命令使用 pyenv commands 显示所有可用命令 查看本机安装 Python 版本使用如下命令查看本机安装版本 1pyenv versions 星号表示当前正在使用的 Python 版本。使用 python -V 确认版本。 查看可安装 Python 版本使用如下命令查看可安装版本 1pyenv install -l python 安装与卸载12$ pyenv install 2.7.3 # 安装 python$ pyenv uninstall 2.7.3 # 卸载 python python 切换12$ pyenv global 2.7.3 # 设置全局的 Python 版本，通过将版本号写入 ~/.pyenv/version 文件的方式。$ pyenv local 2.7.3 # 设置 Python 本地版本，通过将版本号写入当前目录下的 .python-version 文件的方式。通过这种方式设置的 Python 版本优先级较 global 高。 python 优先级 shell &gt; local &gt; global pyenv 会从当前目录开始向上逐级查找 .python-version 文件，直到根目录为止。若找不到，就用 global 版本。 1234$ pyenv shell 2.7.3 # 设置面向 shell 的 Python 版本，通过设置当前 shell 的 PYENV_VERSION 环境变量的方式。这个版本的优先级比 local 和 global 都要高。–unset 参数可以用于取消当前 shell 设定的版本。$ pyenv shell --unset$ pyenv rehash # 创建垫片路径（为所有已安装的可执行文件创建 shims，如：~/.pyenv/versions/*/bin/*，因此，每当你增删了 Python 版本或带有可执行文件的包（如 pip）以后，都应该执行一次本命令） pyenv-virtualenvpyenv 插件：pyenv-virtualenv 使用自动安装 pyenv 后，它会自动安装部分插件，通过 pyenv-virtualenv 插件可以很好的和 virtualenv 结合： 123456789einverne@ev  ~  cd ~/.pyenv/pluginseinverne@ev  ~/.pyenv/plugins   master  lltotal 24Kdrwxr-xr-x 4 einverne einverne 4.0K Apr 22 10:55 pyenv-doctordrwxr-xr-x 5 einverne einverne 4.0K Apr 22 10:55 pyenv-installerdrwxr-xr-x 4 einverne einverne 4.0K Apr 22 10:55 pyenv-updatedrwxr-xr-x 7 einverne einverne 4.0K Apr 22 10:55 pyenv-virtualenvdrwxr-xr-x 4 einverne einverne 4.0K Apr 22 10:55 pyenv-which-extdrwxr-xr-x 5 einverne einverne 4.0K Apr 22 10:54 python-build 创建虚拟环境1$ pyenv virtualenv 2.7.10 env-2.7.10 若不指定 python 版本，会默认使用当前环境 python 版本。如果指定 Python 版本，则一定要是已经安装过的版本，否则会出错。环境的真实目录位于 ~/.pyenv/versions 下 列出当前虚拟环境123pyenv virtualenvspyenv activate env-name # 激活虚拟环境pyenv deactivate #退出虚拟环境，回到系统环境 删除虚拟环境12pyenv uninstall my-virtual-envrm -rf ~/.pyenv/versions/env-name # 或者删除其真实目录 使用 pyenv 来管理 python，使用 pyenv-virtualenv 插件来管理多版本 python 包。此时，还需注意，当我们将项目运行的 env 环境部署到生产环境时，由于我们的 python 包是依赖 python 的，需要注意生产环境的 python 版本问题。]]></content>
      <tags>
        <tag>mac</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scrcpy]]></title>
    <url>%2F2020%2F01%2F30%2FScrcpy%2F</url>
    <content type="text"><![CDATA[Mac使用Scrcpy远程显示/控制Android手机 要求 Android 5.0以上 启用 adb 调试（即 USB 调试） 安装方法Linux安装方法：手动安装说明。不用担心，作为 Linux 用户，不难。 Windows直接下载： scrcpy-win32-v1.10.zip(SHA-256: f98b400b3764404b33b212e9762dd6f1593ddb766c1480fc2609c94768e4a8e1) scrcpy-win64-v1.10.zip(SHA-256: 95de34575d873c7e95dfcfb5e74d0f6af4f70b2a5bc6fde0f48d1a05480e3a44) macOS需要先安装 Homebrew，然后在终端中运行： 12brew install scrcpybrew cask install android-platform-tools 使用方法USB连接连接手机后使用控制台使用命令 1scrcpy Wi-Fi 连接方式注意，要使用 Wi-Fi，仍然需要每次先用 USB 连接手机一次，实用性还不是特别高。 将设备连接到与计算机相同的 Wi-Fi 获取手机 IP 地址（在设置→关于手机→状态） 启用 TCP/IP 上的 adb：adb tcpip 5555 连接到您的设备：adb connect 手机IP：5555 拔下手机 像往常一样运行 scrcpy 要切换回USB模式：adb usb]]></content>
      <tags>
        <tag>mac</tag>
        <tag>andorid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos 安装 vsftpd 以及 php 调用遇到的坑]]></title>
    <url>%2F2019%2F04%2F01%2Fcentos-%E5%AE%89%E8%A3%85-vsftpd-%E4%BB%A5%E5%8F%8A-php-%E8%B0%83%E7%94%A8%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[centos 安装 vsftpd 以及 php 调用遇到的坑 环境1centsos 7.5 安装这里我直接使用 yum 的安装方式 1yum install vsftpd 如果需要连接其他 FTP 服务器，则可以安装 FTP 客户端。 1yum install ftp 添加用户1234adduser userftppasswd userftp# 禁止用户的 ssh 登录权限，只允许 FTP 访问:usermod -s /sbin/nologin userftp 配置 VSFTP路径: /etc/vsftpd/vsftpd.conf 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778# 不允许匿名用户登录anonymous_enable=NO# 允许本地用户登录，即 linux 系统中的用户帐号登录FTP服务器local_enable=YES# 是否允许本地用户对 FTP 服务器文件具有写权限write_enable=YES# 或其它值，设置本地用户的文件掩码 为缺省022local_umask=022# 允许匿名用户上传文件，须将 write_enable=YESanon_upload_enable=YES# 允许匿名用户创建新文件夹anon_mkdir_write_enable=YES# 激活目录欢迎信息功能dirmessage_enable=YES# 系统记录服务器上传和下载情况的日志文件，默认情况该日志文件为/var/log/vsftpd.log，也可以通过下面的 xferlog_file 选项对其进行设定xferlog_enable=YES# 设定 FTP 服务器将启用 FTP 数据端口的连接请求 ,ftp-data 数据传输 ，21 为连接控制端口connect_from_port_20=YES# 设定是否允许改变上传文件的属主，与下面一个设定项配合使用chown_uploads=YES# 设置想要改变的上传文件的属主，如果需要，则输入一个系统用户名，例如可以把上传的文件都改成 root 属主。whoever：任何人chown_username=whoever# 设定系统维护记录FTP服务器上传和下载情况的日志文件，/var/log/vsftpd.log是默认的，也可以另设其它xferlog_file=/var/log/vsftpd.log# 如果启用此选项，传输日志文件将以标准 xferlog 的格式书写，该格式的日志文件默认为/var/log/xferlog，也可以通过xferlog_file选项对其进行设定xferlog_std_format=YES# 如果添加并启用此选项，将生成两个相似的日志文件，默认在/var/log/xferlog和/var/log/vsftpd.log目录下。前者是wu_ftpd类型的传输日志，可以利用标准日志工具对其进行分析；后者是vsftpd类型的日志dual_log_enable=YES# 如果添加并启用此选项，则原本应该输出到/var/log/vsftpd.log中的日志，将输出到系统日志中syslog_enable=YES# 设置数据传输中断间隔时间，此语句表示空闲的用户会话中断时间为600秒，即当数据传输结束后，用户连接FTP服务器的时间不应超过600秒，可以根据实际情况对该值进行修改idle_session_timeout=600# 设置数据连接超时时间，该语句表示数据连接超时时间为 120 秒，可根据实际情况对其个修改data_connection_timeout=120# 运行 vsftpd 需要的非特权系统用户，缺省是nobodynopriv_user=ftpsecure# 如果 FTP client 会下达“async ABOR”这个指令时，这个设定才需要启用，而一般此设定并不安全，所以通常将其取消async_abor_enable=YES# 大多数 FTP 服务器都选择用 ASCII 方式传输数据，用 ASCII 方式上传文件ascii_upload_enable=YES# 用 ASCII 方式下载文件ascii_download_enable=YES# 设置登录FTP服务器时显示的欢迎信息，可以修改=后的欢迎信息内容。另外如在需要设置更改目录欢迎信息的目录下创建名为 .message 的文件，并写入欢迎信息保存后，在进入到此目录会显示自定义欢迎信息ftpd_banner=Welcome to blah FTP service.# 可将某些特殊的 email address 抵挡住。如果以anonymous登录服务器时，会要求输入密码，也就是您的email address,如果很讨厌某些email address，就可以使用此设定来取消他的登录权限，但必须与下面的设置项配合deny_email_enable=YES# 当上面的 deny_email_enable=YES 时，可以利用这个设定项来规定那个email address不可登录vsftpd服务器，此文件需用户自己创建，一行一个email address即可banned_email_file=/etc/vsftpd/banned_emails# 设置为 NO 时，用户登录FTP服务器后具有访问自己目录以外的其他文件的权限，设置为 YES 时，用户被锁定在自己的 home 目录中，vsftpd将在下面 chroot_list_file选项值的位置寻找 chroot_list文件，此文件需用户建立，再将需锁定在自己home目录的用户列入其中，每行一个用户chroot_list_enable=YES# 此文件需自己建立，被列入此文件的用户，在登录后将不能切换到自己目录以外的其他目录，由 FTP 服务器自动地 chrooted 到用户自己的home目录下，使得 chroot_list文件中的用户不能随意转到其他用户的FTP home目录下，从而有利于FTP服务器的安全管理和隐私保护chroot_list_file=/etc/vsftpd/chroot_list# 允许递归查询，大型站点的 FTP 服务器启用此项可以方便远程用户查询ls_recurse_enable=YES# vsftpd 将以独立模式运行，由vsftpd自己监听和处理连接请求listen=YES# 设定支持IPV6listen_ipv6=YES# 设置 PAM 外挂模块提供的认证服务所使用的配置文件名，即/etc/pam.d/vsftpd文件，此文件中file=/etc/vsftpd/ftpusers字段，说明了PAM模块能抵挡的帐号内容来自文件/etc/vsftpd/ftpusers中pam_service_name=vsftpd# 默认NO，此时ftpusers文件中的用户禁止登录FTP服务器；若此项设为YES，则 user_list文件中的用户允许登录FTP服务器，而如果同时设置了 userlist_deny=YES，则user_list文件中的用户将不允许登录FTP服务器，甚至连输入密码提示信息都没有，直接被FTP服务器拒绝userlist_enable=YES/NO# 默认YES，设置是否阻扯user_list文件中的用户登录FTP服务器userlist_deny=YES/NO# 表明服务器使用 tcp_wrappers 作为主机访问控制方式，tcp_wrappers可以实现linux系统中网络服务的基于主机地址的访问控制，在/etc目录中的hosts.allow和hosts.deny两个文件用于设置tcp_wrappers的访问控制，前者设置允许访问记录，后者设置拒绝访问记录。例如想限制某些主机对FTP服务器192.168.57.2的匿名访问，编缉/etc/hosts.allow 文件，如在下面增加两行命令：vsftpd:192.168.57.1ENY 和vsftpd:192.168.57.9ENY 表明限制IP为192.168.57.1/192.168.57.9主机访问IP为192.168.57.2的FTP服务器，此时FTP服务器虽可以PING通，但无法连接tcp_wrappers=YES# 对FTP客户机使用FTP服务器资源进行控制# 设置FTP服务器所允许的最大客户端连接数，值为0时表示不限制。例如max_client=100表示FTP服务器的所有客户端最大连接数不超过100个max_client# 设置对于同一IP地址允许的最大客户端连接数，值为0时表示不限制。例如max_per_ip=5表示同一IP地址的FTP客户机与FTP服务器建立的最大连接数不超过5个。 max_per_ip# 设置本地用户的最大传输速率，单位为B/s，值为0时表示不限制。例如local_max_rate=500000表示FTP服务器的本地用户最大传输速率设置为500KB/s. local_max_rate# 设置匿名用户的最大传输速率，单位为B/s,值为0表示不限制。例如ano_max_rate=200000，表示FTP服务器的匿名用户最大传输速率设置为200KB/s.anon_max_rate# 解决时间不一致use_localtime=YES 指定用户访问指定目录c12345678910111213141516171819202122用户相关操作useradd -d /web-data/production-ftp -g ftp -s /sbin/nologin onelooks设置密码passwd onelooks用户删除userdel -r onelooks与该功能相关的选项主要包括：chroot_local_userchroot_list_enablechroot_list_file可以通过如下两种方法来设置chroot，从而杜绝上述不安全的情况发生：chroot_local_user=NOchroot_list_enable=YESchroot_list_file=/etc/vsftpd/chroot_list设置后，只有/etc/vsftpd.chroot_list文件中指定的用户不能返回上一层文件夹chroot_local_user=YESchroot_list_enable=YESchroot_list_file=/etc/vsftpd/chroot_list设置后，只有/etc/vsftpd.chroot_list文件中指定的用户可以返回上一层500 错误 可添加配置设置根目录写权限allow_writeable_chroot=YES 启动服务 1service vsftpd start|stop|restart 这里ftp服务器基本安装完成了, 下面怎么用php去连接它, 这也是我遇到的坑 php使用php提供了ftp的扩展, 直接编译安装就行了, 编译安装php-FTP扩展 下面是最坑的时候… php上传文件的时候一直报ftp_put(): Failed to establish connection. 问题原因分析: 防火墙, 阿里的安全组规则都开放21端口的访问, 如果 ftp 是主动模式就打开20端口, 被动模式则就打开pasv_min_port和pasv_max_port之间的端口 目录权限问题 ftp 配置ascii_upload_enable没有打开, 这个就是我导致错误的问题-_-!!!!]]></content>
  </entry>
  <entry>
    <title><![CDATA[centos yum 安装mysql]]></title>
    <url>%2F2019%2F02%2F02%2Fcentos-yum-%E5%AE%89%E8%A3%85mysql%2F</url>
    <content type="text"><![CDATA[CentOS 安装Mysql 5.7 环境Linux版本：4.1.5-1.el7.centos.x86_64 (通过命令uname -a查看) 安装安装命令1yum 安装源文件1mysql-community-server-5.7.18-1.el7.x86_64.rpm 安装步骤官网下载对应版本官网下载 : MySQL Community Server 5.7.18选择Select Operating System -&gt; Red Hat Enterprise Linux / Oracle Linux，由于自己Linux版本为4.1.5-1.el7.centos.x86_64，即: el7，所以选择：mysql-community-server-5.7.18-1.el7.x86_64.rpm 下载 yum设置 官网下载 : RPM Package选择mysql57-community-release-el7-10.noarch.rpm，下载，根据A Quick Guide to Using the MySQL Yum Repository设置yum 添加Mysql Yum Repository 1sudo rpm -Uvh mysql57-community-release-el7-10.noarch.rpm 选择版本 1234567891011121314151617181920212223# 先看yum可以安装的mysql版本yum repolist all | grep mysql# 可以通过编辑 /etc/yum.repos.d/mysql-community.repo文件进行修改安装版本# 如果我们希望安装mysql 5.7版本，则需要把mysql 5.6版本取消，方法如下：vi /etc/yum.repos.d/mysql-community.repo# 修改mysql-community.repo如下部分#将enabled设置为1，即安装5.7版本[mysql57-community]name=MySQL 5.7 Community Serverbaseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/6/$basearch/enabled=1gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql...# Enable to use MySQL 5.6 , 将enabled设置为0，即不安装5.6版本[mysql56-community]name=MySQL 5.6 Community Serverbaseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/6/$basearch/enabled=0gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql yum安装 yum安装下载的mysql-community-server-5.7.18-1.el7.x86_64.rpm 1sudo yum install mysql-community-server 安装完毕-&gt;启动mysql 12345sudo service mysqld start # 通过如下命令找到mysql root 初始密码sudo grep 'temporary password' /var/log/mysqld.log # 登录mysql 详见: 官网登录mysql，修改密码（密码设置简单也会报错）修改密码 : mysql 5.7和mysql 5.6修改密码命令不太相同，具体参见链接12345mysql -uroot -p&#123;初始随机密码&#125;# 注意：此事必须修改密码才能正常使用mysql，否则任何操作都会报错# 修改密码 : mysql 5.7和mysql 5.6修改密码命令不太相同# 官方建议修改密码命令如下：ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_password_复杂点的密码'; mysql远程登录12345678# 假设有A和B两台机器，都安装有mysql，现在设置B机器可远程访问A机器mysql，配置方法如下：# 进入机器A的mysql root账户，设置允许其他机器通过root账户远程访问本机mysqluse mysqlGRANT ALL ON *.* to root@'%' IDENTIFIED BY 'your-root-password';FLUSH PRIVILEGES;# 以上设置成功后，可以从B机器上远程登录本机mysql，输入下面命令，可远程访问机器A：mysql -hA机器IP -uroot -pA机器root账户密码]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux iptables配置]]></title>
    <url>%2F2018%2F10%2F23%2FLinux-iptables%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[在服务器中开启防火墙可以有效一些避免端口扫描和黑客攻击,所以配置iptables是非常有必要的.今天记录一下配置过程 检查是否启动iptables123service iptables status# 或者/etc/init.d/iptables status 如果显示如下，则说明iptables服务是有安装的，但是没有启动服务。如果没有安装的话可以直接yum安装1iptables: Firewall is not running. 1yum install -y iptables 生成配置文件1vim /etc/sysconfig/iptables 启动iptables1234service iptables start#或/etc/init.d/iptables startiptables: Applying firewall rules: [ OK ] 查看当前iptables的配置情况12345678910iptables -L -n#会显示如下Chain INPUT (policy ACCEPT)target prot opt source destination Chain FORWARD (policy ACCEPT)target prot opt source destination Chain OUTPUT (policy ACCEPT)target prot opt source destination 如果显示这样就说明iptables服务已经启动了 配置规则123456789101112131415161718192021222324252627#允许对外请求的返回包iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT#允许icmp包通过iptables -A INPUT -p icmp --icmp-type any -j ACCEPT#允许来自于lo接口的数据包，如果没有此规则，将不能通过127.0.0.1访问本地服务iptables -A INPUT -i lo -j ACCEPT#常用端口iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPTiptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPTiptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 23 -j ACCEPTiptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPTiptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPTiptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPTiptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT#过滤所有非以上规则的请求iptables -P INPUT DROP#如果要添加内网ip信任（接受其所有TCP请求）#注：(**.**.**.**)为IP,下同iptables -A INPUT -p tcp -s **.**.**.** -j ACCEPT#要封停一个IP，使用下面这条命令iptables -I INPUT -s **.**.**.** -j DROP#要解封一个IP，使用下面这条命令iptables -D INPUT -s **.**.**.** -j DROP 保存重启防火墙12/etc/init.d/iptables saveservice iptables restart 其他方法：12345678# 打开配置文件vim /etc/sysconfig/iptables# 加入如下语句:-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT# 保存（按Esc退出编辑）:wq# 重启防火墙，修改完成service iptables restart 其他常用命令（不是一定要做）12345678#允许所有入栈规则iptables -P INPUT ACCEPT#清空默认所有规则iptables -F#清空自定义的所有规则iptables -X#计数器置0iptables -Z 关闭端口常用删除端口规则123456# 查看当前端口所在行数iptables -L -n --line-number# 删除指定序列的端口（下面是删除第五条端口）iptables -D INPUT 5# 确认是否已经删除，可以重新查看列表iptables -L -n --line-number 其他方法：123456789# 打开配置文件vim /etc/sysconfig/iptables # 直接删除对应端口的那句 ！！！！# 保存（按Esc退出编辑）:wq# 重启防火墙，修改完成service iptables restart 保存规则，重启iptables服务1234567891011#保存修改/etc/init.d/iptables save#查看规则是否添加成功vim /etc/sysconfig/iptables#添加到iptables服务自启动chkconfig iptables on#重启iptables服务service iptables restart]]></content>
  </entry>
  <entry>
    <title><![CDATA[supervisor的使用与管理]]></title>
    <url>%2F2018%2F10%2F08%2Fsupervisor%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[Supervisor http://supervisord.org/是用Python开发的一个client/server服务，是Linux/Unix系统下的一个进程管理工具，不支持Windows系统。它可以很方便的监听、启动、停止、重启一个或多个进程。用Supervisor管理的进程，当一个进程意外被杀死，supervisort监听到进程死后，会自动将它重新拉起，很方便的做到进程自动恢复的功能，不再需要自己写shell脚本来控制。 安装Python pip 安装python 第三方包的安装方法，此处不详细描述1pip install supervisor 配置说明supervisor的配置参数较多，下面介绍一下常用的参数配置，详细的配置及说明，请参考官方文档介绍。注：分号（;）开头的配置表示注释1234567891011121314151617181920212223242526272829303132333435363738394041424344[unix_http_server]file=/tmp/supervisor.sock ;UNIX socket 文件，supervisorctl 会使用;chmod=0700 ;socket文件的mode，默认是0700;chown=nobody:nogroup ;socket文件的owner，格式：uid:gid ;[inet_http_server] ;HTTP服务器，提供web管理界面;port=127.0.0.1:9001 ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性;username=user ;登录管理后台的用户名;password=123 ;登录管理后台的密码 [supervisord]logfile=/tmp/supervisord.log ;日志文件，默认是 $CWD/supervisord.loglogfile_maxbytes=50MB ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小logfile_backups=10 ;日志文件保留备份数量默认10，设为0表示不备份loglevel=info ;日志级别，默认info，其它: debug,warn,tracepidfile=/tmp/supervisord.pid ;pid 文件nodaemon=false ;是否在前台启动，默认是false，即以 daemon 的方式启动minfds=1024 ;可以打开的文件描述符的最小值，默认 1024minprocs=200 ;可以打开的进程数的最小值，默认 200 [supervisorctl]serverurl=unix:///tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord ; [program:xx]是被管理的进程配置参数，xx是进程的名称[program:xx]command=/opt/apache-tomcat-8.0.35/bin/catalina.sh run ; 程序启动命令autostart=true ; 在supervisord启动的时候也自动启动startsecs=10 ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒autorestart=true ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启startretries=3 ; 启动失败自动重试次数，默认是3user=tomcat ; 用哪个用户启动进程，默认是rootpriority=999 ; 进程启动优先级，默认999，值小的优先启动redirect_stderr=true ; 把stderr重定向到stdout，默认falsestdout_logfile_maxbytes=20MB ; stdout 日志文件大小，默认50MBstdout_logfile_backups = 20 ; stdout 日志文件备份数，默认是10; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）stdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.outstopasgroup=false ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程killasgroup=false ;默认为false，向进程组发送kill信号，包括子进程 ;包含其它配置文件[include]files = relative/directory/*.ini ;可以指定一个或多个以.ini结束的配置文件 include示例：12[include]files = /opt/absolute/filename.ini /opt/absolute/*.ini foo.conf config??.ini 配置管理进程进程管理配置参数，不建议全都写在supervisord.conf文件中，应该每个进程写一个配置文件放在include指定的目录下包含进supervisord.conf文件中 创建/etc/supervisor/config.d目录，用于存放进程管理的配置文件 修改/etc/supervisor/supervisord.conf中的include参数，将/etc/supervisor/conf.d目录添加到include中12[include]files = /etc/supervisor/config.d/*.ini 启动Supervisor服务1supervisord -c /etc/supervisor/supervisord.conf Supervisorctlsupervisord启动成功后，可以通过supervisorctl客户端控制进程，启动、停止、重启。运行supervisorctl命令，不加参数，会进入supervisor客户端的交互终端，并会列出当前所管理的所有进程1supervisorctl -c /etc/supervisord.conf 若成功，则会进入supervisorctl的shell界面，有以下方法：123456status # 查看程序状态stop xxx # 关闭 update_ip 程序start xxx # 启动 update_ip 程序restart xxx # 重启 update_ip 程序reread ＃ 读取有更新（增加）的配置文件，不会启动新添加的程序update ＃ 重启配置文件修改过的程序 执行相关操作后，可以在web端看到具体的变化情况，如stop 程序1stop xxx Web管理界面出于安全考虑，默认配置是没有开启web管理界面，需要修改supervisord.conf配置文件打开http访权限，将下面的配置：1;[inet_http_server] ; inet (TCP) server disabled by default;port=127.0.0.1:9001 ; (ip_address:port specifier, *:port for all iface);username=user ; (default is no username (open server));password=123 ; (default is no password (open server)) 开机启动Supervisor服务配置systemctl服务进入/lib/systemd/system目录，并创建supervisor.service文件1234;[inet_http_server] ; inet (TCP) server disabled by default;port=127.0.0.1:9001 ; (ip_address:port specifier, *:port for all iface);username=user ; (default is no username (open server));password=123 ; (default is no password (open server)) 设置开机启动12systemctl enable supervisor.servicesystemctl daemon-reload 修改文件权限为7661chmod 766 supervisor.service 配置service类型服务1#!/bin/bash## supervisord This scripts turns supervisord on## Author: Mike McGrath &lt;mmcgrath@redhat.com&gt; (based off yumupdatesd)## chkconfig: - 95 04## description: supervisor is a process control utility. It has a web based# xmlrpc interface as well as a few other nifty features.# processname: supervisord# config: /etc/supervisor/supervisord.conf# pidfile: /var/run/supervisord.pid# # source function library. /etc/rc.d/init.d/functions RETVAL=0 start() &#123; echo -n $"Starting supervisord: " daemon "supervisord -c /etc/supervisor/supervisord.conf " RETVAL=$? echo [ $RETVAL -eq 0 ] &amp;&amp; touch /var/lock/subsys/supervisord&#125; stop() &#123; echo -n $"Stopping supervisord: " killproc supervisord echo [ $RETVAL -eq 0 ] &amp;&amp; rm -f /var/lock/subsys/supervisord&#125; restart() &#123; stop start&#125; case "$1" in start) start ;; stop) stop ;; restart|force-reload|reload) restart ;; condrestart) [ -f /var/lock/subsys/supervisord ] &amp;&amp; restart ;; status) status supervisord RETVAL=$? ;; *) echo $"Usage: $0 &#123;start|stop|status|restart|reload|force-reload|condrestart&#125;" exit 1esac exit $RETVAL 将上述脚本内容保存到/etc/rc.d/init.d/supervisor文件中，修改文件权限为755，并设置开机启动12chmod 755 /etc/rc.d/init.d/supervisorchkconfig supervisor on 注意：修改脚本中supervisor配置文件路径为你的supervisor的配置文件路径]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux Deploy:在Android上部署Linux]]></title>
    <url>%2F2018%2F10%2F01%2FLinux-Deploy-%E5%9C%A8Android%E4%B8%8A%E9%83%A8%E7%BD%B2Linux%2F</url>
    <content type="text"><![CDATA[android上部署linux服务器, 这里写这篇文章记录安装步骤 安装 BusyBoxProgithub地址: https://github.com/meefik/busybox BusyBoxPro来扩展linux命令集，需要root，如果是小米的话需要解锁system分区。打开BusyBoxPro，授予root权限 用LinuxDeploy开始安装linuxgithub: https://github.com/meefik/linuxdeploy 安装LinuxDeploy并授予root权限 添加配置文件并设置属性点击软件的左上角，在出现的菜单栏里点配置文件，再点➕创建新的配置文件，名称随意。创建完之后选中新建后的配置文件建议都创建一个新的配置文件，这样出错的时候删除配置文件和系统就行了 Containerization method //默认的就行chroot 发行版 //根据自己的需要选择CentOS 架构（Architecture） 这个我建议根据自己的手机CPU的架构来选择，不知道的可以在软件的主界面点右上角的按钮,选择状态12345[17:11:48] &gt;&gt;&gt; status[17:11:49] Device: MI 6[17:11:49] Android: 7.1.1[17:11:49] Architecture: aarch64 //这个就是架构[17:11:49] Kern el: 4.4.21-perf-g6a9ee37d-06151-g05a843 还有就是如果选择Ubuntu时架构里没有这个aarch64，CPU是64位的就选择arm64，32位的就是arm，正常情况下是这样的，毕竟还有一些x86的CPU。发行版版本(Distribution suit)：根据需要选择 源地址Source path ：选择了发行版后会自动填写为官方的源，可以换成其他源，也可以换成文件地址，用本地镜像或者Repository下载的系统包来安装。 安装类型：通常选择文件和目录两种方式。其中文件是创建一个img文件来当做系统的磁盘，目录的话是在这个软件的操作系统环境下创建一个目录直接存放系统文件。我建议如果不是建站的话选择文件，要存储东西或者建网站并且手机/date目录存储空间够的话可以选择目录。不过，就我安装了这么多次之后总结出来一条：选择目录出现错误的次数比选择文件的要多的多。出现错误最多的就是ssh没安装好。 安装路径：如果选择的是文件，那么这一项默认的是$EXTERNAL_STORAGE:/linux.img，也就是/sdcard/linux.img。它是你的手机存储目录，你也可以指定任何一个存储路径；如果选择的是目录，那么它默认的是${ENV_DIR}/rootfs/linux。关于这个路径，最好不要更改，否则出现错误的几率会大大增加。 镜像大小和文件系统：如果选择的是文件，会让你选择这两项。文件大小最大2048M，也就是2G，文件系统选择自动就行。 用户名和密码：就是你之后用来登陆SSH的，自己随意填。 DNS服务器：可以不填，如果有需要可以填，个人比较倾向阿里的DNS，谷歌的也可以。 本地化：点开可以选择，中文的话就是zh_CN.UTF-8，英文的是en_US.UTF-8 下面那个MOUNTS如果勾选Enable的话要填写一个挂载点，比如/mnt/android，这样可以在Linux里访问手机存储里的内容了。 SSH这个必选吧，勾选之后就可以了。 图形界面：如果有需要可以勾选。 开始安装配置完属性后就回到软件主界面，点击右上角按钮，选择安装，然后就会出现&gt;&gt;&gt;depoly ……………… ……………… 再一次出现&lt;&lt;&lt;depoly说明安装成功。这个过程的快慢看源地址的设置。如果设置的是网络上的源，会很慢，如果是本地的镜像很快就搞定了。 启动Linux和停止安装完之后就可以点开始了。1234567891011121314[18:06:24] &gt;&gt;&gt; start[18:06:25] Checking file system ... done[18:06:25] Mounting partitions: [18:06:25] / ... done[18:06:25] /proc ... done[18:06:25] /sys ... done[18:06:25] /sys/fs/selinux ... done[18:06:25] /dev ... done[18:06:25] /dev/pts ... done[18:06:25] /dev/shm ... done[18:06:25] :: Configuring core/mnt ... [18:06:25] :: Configuring core/net ... [18:06:26] :: Starting extra/ssh ... done[18:06:26] &lt;&lt;&lt; start 问题上面说了一个ssh启动失败的问题，还有一个问题就是如果在安装的过程中出现1234[23:14:55] &gt;&gt;&gt; deploy[23:14:56] ## bootstrap/rootfs : do_install &amp;&amp; do_configure[23:14:56] The container is already mounted.[23:14:56] &lt;&lt;&lt; deploy 其实这个很好解决，就是你已经启动了一个Linux系统，所以要点一下停止然后再安装。 本人暂时只遇到这一个问题, 如果有其它问题请联系本人, 共同折腾 (^__^) 嘻嘻]]></content>
  </entry>
  <entry>
    <title><![CDATA[iptables]]></title>
    <url>%2F2018%2F09%2F29%2FLinux%E4%B8%8Biptables%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[Linux下iptables防火墙配置详解]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx-config]]></title>
    <url>%2F2018%2F09%2F29%2Fnginx-config%2F</url>
    <content type="text"><![CDATA[nginx 配置基础解释, 以后可能做一些更新 nginx 基本配置定义Nginx运行的用户和用户组,系统中必须有此用户,可以是nologin1user www www; 启动进程,通常设置成和cpu的数量相等1worker_processes 1; 全局错误日志及PID文件12error_log /var/log/nginx/error.log; #错误日志定义等级，[ debug | info | notice | warn | error | crit ] pid /var/run/nginx.pid; 一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。1worker_rlimit_nofile 65535; 工作模式及连接数上限12345events &#123; use epoll; #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能 worker_connections 1024;#单个后台worker process进程的最大并发链接数 （最大连接数=连接数*进程数） # multi_accept on; &#125; 设定http服务器，利用它的反向代理功能提供负载均衡支持123456789101112131415161718192021222324http &#123;#设定mime类型,类型由mime.type文件定义include /etc/nginx/mime.types;default_type application/octet-stream;#设定日志格式access_log /var/log/nginx/access.log;#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，#必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.sendfile on;#tcp_nopush on;#连接超时时间#keepalive_timeout 0;keepalive_timeout 65;tcp_nodelay on;#开启gzip压缩gzip on;gzip_disable "MSIE [1-6]\.(?!.*SV1)";#设定请求缓冲client_header_buffer_size 1k;large_client_header_buffers 4 4k;#包含其它配置文件，如自定义的虚拟主机include /etc/nginx/conf.d/*.conf;include /etc/nginx/sites-enabled/*; 虚拟主机配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748server &#123; #侦听80端口 listen 80; #定义使用www.xx.com访问 server_name www.xx.com; #设定本虚拟主机的访问日志 access_log logs/www.xx.com.access.log main; #默认请求 location / &#123; root /root; #定义服务器的默认网站根目录位置 index index.php index.html index.htm; #定义首页索引文件的名称 fastcgi_pass www.xx.com; fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name; include /etc/nginx/fastcgi_params; &#125; # 定义错误提示页面 error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root /root; &#125; #静态文件，nginx自己处理 location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123; root /var/www/virtual/htdocs; #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。 expires 30d; &#125; #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置. location ~ \.php$ &#123; root /root; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /home/www/www$fastcgi_script_name; include fastcgi_params; &#125; #设定查看Nginx状态的地址 location /NginxStatus &#123; stub_status on; access_log on; auth_basic "NginxStatus"; auth_basic_user_file conf/htpasswd; &#125; #禁止访问 .htxxx 文件 location ~ /\.ht &#123; deny all; &#125; &#125;&#125; nginx的负载均衡和代理配置设定http服务器，利用它的反向代理功能提供负载均衡支持1234567891011121314151617181920http &#123; #设定mime类型,类型由mime.type文件定义include /etc/nginx/mime.types;default_type application/octet-stream;#设定日志格式access_log /var/log/nginx/access.log;#省略上文有的一些配置节点#。。。。。。。。。。#设定负载均衡的服务器列表upstream mysvr &#123; #weigth参数表示权值，权值越高被分配到的几率越大 server 192.168.8.1x:3128 weight=5;#本机上的Squid开启3128端口 server 192.168.8.2x:80 weight=1; server 192.168.8.3x:80 weight=6;&#125;upstream mysvr2 &#123; #weigth参数表示权值，权值越高被分配到的几率越大 server 192.168.8.x:80 weight=1; server 192.168.8.x:80 weight=6;&#125; 第一个虚拟服务器123456789101112131415161718192021222324252627server &#123; #侦听192.168.8.x的80端口 listen 80; server_name 192.168.8.x; #对aspx后缀的进行负载均衡请求 location ~ .*\.aspx$ &#123; root /root; #定义服务器的默认网站根目录位置 index index.php index.html index.htm; #定义首页索引文件的名称 proxy_pass http://mysvr ;#请求转向mysvr 定义的服务器列表 #以下是一些反向代理的配置. proxy_redirect off; #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; client_max_body_size 10m; #允许客户端请求的最大单文件字节数 client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数， proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时) proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时) proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时) proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小 proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置 proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2） proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传 &#125; &#125;&#125;]]></content>
      <categories>
        <category>后端</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[frp]]></title>
    <url>%2F2018%2F09%2F27%2Ffrp%2F</url>
    <content type="text"><![CDATA[frp 的使用及配置 前言frp是中国开发者fatedier的作品，先看介绍1frp 是一个高性能的反向代理应用，可以帮助您轻松地进行内网穿透，对外网提供服务，支持 tcp, udp, http, https 等协议类型，并且 web 服务支持根据域名进行路由转发。 之前一直在路由器上使用ngrok，所以对frp一无所知。做渗透测试，需要NAT穿透，所以一直在找好用的工具，磨刀不误砍柴工。尝试之后发现，frp用法和ngrok相似，但是frp比ngrok更加优秀。配置过程很简单，但是也遇到一些问题，所以把过程记录下来。 安装GitHub: https://github.com/fatedier/frp 下载对应操作系统版本 配置server端 查看帮助1234567891011121314151617root@gorgiaxx:~# frps -hfrps is the server of frpUsage: frps [-c config_file] [-L log_file] [--log-level=&lt;log_level&gt;] [--addr=&lt;bind_addr&gt;] frps [-c config_file] --reload frps -h | --help frps -v | --versionOptions: -c config_file set config file -L log_file set output log file, including console --log-level=&lt;log_level&gt; set log level: debug, info, warn, error --addr=&lt;bind_addr&gt; listen addr for client, example: 0.0.0.0:7000 --reload reload ini file and configures in common section won't be changed -h --help show this screen -v --version show version 支持读取配置文件，所以我们直接看配置文件。作者给出的配置文件示例已经写的很详细了。所以配置起来非常方便 配置文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859[common]# 支持IPv6，但是大陆网络情况下几乎不支持。这里填我们的IPv4地址，隧道端口7000bind_addr = 45.32.42.185bind_port = 7000# 这个就是http代理的端口，不要和nginx冲突，否则直接闪退。vhost_http_port = 8000vhost_https_port = 8443# 控制面板的访问端口，在这里我们可以看到隧道的使用情况dashboard_port = 7500# 控制面板访问控制，请修改默认密码dashboard_user = your_namedashboard_pwd = your_password# 日志记录路径，控制面板也能访问log_file = /var/log/frps.log# 日志级别，可选debug, info, warn, error。这里只需要warn，免得占空间。log_level = warn# 日志记录时间，不知道是不是支持自动清理，记录下warn日志就够了，也不需要清理。我觉得没必要记录warn以下的信息，就不管了log_max_days = 3# 特权模式，开启之后，支持客户端预配置，也就是不用在服务端单独配置服务，为了示范，我还是下面加一点服务端预配置参数privilege_mode = trueprivilege_token = your_privilege_token# 心跳包配置，默认30秒，超时应该就断开连接了heartbeat_timeout = 30# 设定端口范围，特权模式下端口是客户端决定的，所以要在服务端做好限制，以免影响正常服务privilege_allow_ports = 2000-3000,3001,3003,4000-50000# 最大连接数max_pool_count = 100# 认证超时authentication_timeout = 60# 子域名的根域名，就这样翻译吧subdomain_host = gorgiaxx.me# 这个用作metasploit的reverse_tcp穿透，配好token就好[rev]type = tcpauth_token = gorgiaxxbind_addr = 0.0.0.0# ！！！注意，这里一定要看服务商是否把端口过滤了。vultr把4444端口过滤了害我折腾半天。listen_port = 4444# 这个来代理web服务，用来传输payload[web]# 如果要用http代理，必须至少在前面设定vhost_http_port这个参数。type = httpauth_token = gorgiaxx# 子域名，最后的访问域名就是frp.gorgiaxx.mesubdomain = frp Client端 查看帮助123456789101112131415～$ frpc -hfrpc is the client of frpUsage: frpc [-c config_file] [-L log_file] [--log-level=&lt;log_level&gt;] [--server-addr=&lt;server_addr&gt;] frpc -h | --help frpc -v | --versionOptions: -c config_file set config file -L log_file set output log file, including console --log-level=&lt;log_level&gt; set log level: debug, info, warn, error --server-addr=&lt;server_addr&gt; addr which frps is listening for, example: 0.0.0.0:7000 -h --help show this screen --version show version 配置文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849[common]# 服务器端口和地址server_addr = 45.32.42.185server_port = 7000# 通过http代理访问，一般情况下用不到# http_proxy = http://user:pwd@192.168.1.128:8080# 日志路径，客户端访问这个要root权限，后面加sudo运行吧。log_file = /var/log/frpc.loglog_level = warnlog_max_days = 3# 服务指定给用户的tokenauth_token = gorgiaxx# 特权的tokenprivilege_token = your_token[rev]# tcp | http, default is tcptype = tcplocal_ip = 127.0.0.1local_port = 4444# 加密通信，暂时不需要use_encryption = false# 不是http的情况下，gzip压缩也不要use_gzip = false[pre_rev]# 预配置privilege_mode = truetype = tcplocal_ip = 0.0.0.0local_port = 5555# 远程端口remote_port = 5555[web]type = httplocal_ip = 127.0.0.1local_port = 8080use_gzip = truepool_count = 20# 可以设定访问控制# http_user = admin# http_pwd = admin# 子域名，最后就是frp.gorgiaxx.mesubdomain = frp 启动frp权限控制做的比较好，不怕端口暴露在公网。所以可以放心常驻后台 服务端1nohup frps -c /etc/frps.ini &amp; 客户端1nohup frps -c /etc/frps.ini &amp; Dashboard直接浏览器访问 http://gorgiaxx.me:7500/]]></content>
  </entry>
  <entry>
    <title><![CDATA[MySQL 8.0 在Windows zip 安装过程]]></title>
    <url>%2F2018%2F07%2F26%2Fmysql8-install%2F</url>
    <content type="text"><![CDATA[mysql发布最新的8.0版本今天我们在Windows上面安装 安装下载地址社区版: https://dev.mysql.com/downloads/mysql/ 解压zip包到安装目录比如我的安装目录是：D:\mysql-8.0.11-winx64 配置文件在Windows系统中，配置文件默认是安装目录下的 my.ini 文件，部分配置需要在初始安装时配置，大部分也可以在安装完成后进行更改。当然，极端情况下，所有的都是可以更改的。在安装根目录下添加 my.ini，比如我这里是：D:\mysql-8.0.11-winx64\my.ini，写入基本配置： 12345678910111213141516171819202122232425262728293031323334[mysqld]# Remove leading # and set to the amount of RAM for the most important data# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.# innodb_buffer_pool_size = 128M # Remove leading # to turn on a very important data integrity option: logging# changes to the binary log between backups.# log_bin # These are commonly set, remove the # and set as required.basedir = D:\mysql-8.0.11-winx64datadir = D:\mysql-8.0.11-winx64port = 3306# server_id = ..... # Remove leading # to set options mainly useful for reporting servers.# The server defaults are faster for transactions and fast SELECTs.# Adjust sizes as needed, experiment to find the optimal values.# join_buffer_size = 128M# sort_buffer_size = 2M# read_rnd_buffer_size = 2M sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES character-set-server = utf8mb4 performance_schema_max_table_instances = 600table_definition_cache = 400table_open_cache = 256[mysql]default-character-set = utf8mb4[client]default-character-set = utf8mb4 注意，里面的 basedir 是我本地的安装目录，datadir 是我数据库数据文件要存放的位置，各项配置需要根据自己的环境进行配置。 查看所有的配置项，可参考：https://dev.mysql.com/doc/refman/8.0/en/mysqld-option-tables.html 初始化数据库在MySQL安装目录的 bin 目录下执行命令：1mysqld --initialize --console 执行完成后，会打印 root 用户的初始默认密码，比如：12342018-04-20T02:35:01.507037Z 0 [Warning] [MY-010915] [Server] 'NO_ZERO_DATE', 'NO_ZERO_IN_DATE' and 'ERROR_FOR_DIVISION_BY_ZERO' sql modes should be used with strict mode. They will be merged with strict mode in a future release.2018-04-20T02:35:01.507640Z 0 [System] [MY-013169] [Server] D:\Program\MySQL8\bin\mysqld.exe (mysqld 8.0.11) initializing of server in progress as process 110642018-04-20T02:35:01.508173Z 0 [ERROR] [MY-010340] [Server] Error message file 'D:\Program\MySQL\share\english\errmsg.sys' had only 1090 error messages, but it should contain at least 4512 error messages. Check that the above file is the right version for this program!2018-04-20T02:35:05.464644Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: APWCY5ws&amp;hjQ 其中，第4行的“APWCY5ws&amp;hjQ”就是初始密码，在没有更改密码前，需要记住这个密码，后续登录需要用到。要是你手贱，关快了，或者没记住，那也没事，删掉初始化的 datadir 目录，再执行一遍初始化命令，又会重新生成的。当然，也可以使用安全工具，强制改密码，用什么方法，自己随意。 参考：https://dev.mysql.com/doc/refman/8.0/en/data-directory-initialization-mysqld.html 安装服务在MySQL安装目录的 bin 目录下执行命令：1234# 安装mysqld --install [服务名]# 卸载mysqld --remove [服务名] 后面的服务名可以不写，默认的名字为 mysql。当然，如果你的电脑上需要安装多个MySQL服务，就可以用不同的名字区分了，比如 mysql5 和 mysql8。安装完成之后，就可以通过命令net start mysql启动MySQL的服务了。 参考：https://dev.mysql.com/doc/refman/8.0/en/windows-start-service.html 更改密码和密码认证插件在MySQL安装目录的 bin 目录下执行命令：1mysql -uroot -p 这时候会提示输入密码，记住了第3步的密码，填入即可登录成功，进入MySQL命令模式。在MySQL8.0.4以前，执行1SET PASSWORD=PASSWORD('[修改的密码]'); 就可以更改密码，但是MySQL8.0.4开始，这样默认是不行的。因为之前，MySQL的密码认证插件是“mysql_native_password”，而现在使用的是“caching_sha2_password”。 因为当前有很多数据库工具和链接包都不支持“caching_sha2_password”，为了方便，我暂时还是改回了“mysql_native_password”认证插件。 在MySQL中执行命令：1ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password'; 修改密码验证插件，同时修改密码。 如果想默认使用“mysql_native_password”插件认证，可以在配置文件中配置default_authentication_plugin项。12[mysqld]default_authentication_plugin=mysql_native_password 附、CentOS tar.gz 包安装123456789101112131415wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.11-linux-glibc2.12-x86_64.tar.gzshell&gt; tar zxvf mysql-8.0.11-linux-glibc2.12-x86_64.tar.gz -C /usr/local/shell&gt; groupadd mysqlshell&gt; useradd -r -g mysql -s /bin/false mysqlshell&gt; cd /usr/localshell&gt; ln -s mysql-8.0.11-linux-glibc2.12-x86_64 mysqlshell&gt; cd mysqlshell&gt; mkdir mysql-filesshell&gt; chown mysql:mysql mysql-filesshell&gt; chmod 750 mysql-filesshell&gt; bin/mysqld --initialize --user=mysqlshell&gt; bin/mysql_ssl_rsa_setupshell&gt; bin/mysqld_safe --user=mysql &amp;# Next command is optionalshell&gt; cp support-files/mysql.server /etc/init.d/mysql.server]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[phpstorm增加swoole自动提示]]></title>
    <url>%2F2018%2F07%2F02%2Fphpstorm%E5%A2%9E%E5%8A%A0swoole%E8%87%AA%E5%8A%A8%E6%8F%90%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[phpstorm增加swoole自动提示 下载swoole-ide-helper-en1git clone https://github.com/eaglewu/swoole-ide-helper.git 打开PHPStorm 右键External Libraries，选择Configure PHP Include Path 选择下载好的swoole-ide-helper目录，点击确定。然后就会发现代码中swoole相关方法函数不再反白了。]]></content>
      <tags>
        <tag>php</tag>
        <tag>swoole</tag>
        <tag>phpstorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo 如何添加和发表文章]]></title>
    <url>%2F2018%2F06%2F24%2Fhexo%20%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%8F%91%E8%A1%A8%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[如何在hexo发布一篇文章1.本地写文章选中你的Blog文件夹(我这里选择的是我自己重命名过的),鼠标右键单击，选择Git Bash Here 1.1 新建文章输入指令hexo new XXX 如下图xxx为文章标题，根据自己情况写。 完成后会提示 在…/Blog/source/_post/目录下创建了xxx.md 1.2 写文章我们根据提示的目录，找到这个文件，然后使用编辑器打开。 我这里使用的是Sublime,你可以使用自己喜欢的编辑器。打开后如图所示，可以开始写文章了,写完后请Ctrl+S保存。 关于Markdown可以看我这篇文章Markdown语法和MD编辑器 1.3如何在文章插入图片？可以看我这篇文章 使Hexo文章图文并茂 2.本地预览 (非必要，可选)在编辑文章过程中，我们肯定不想频繁的部署，查看效果。这时候使用hexo s指令进行本地预览，文章编辑完成，且自己满意后，再进行部署。提示INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.这句信息含义是“网站已经运行在本地 http://locahost:4000/ ,按Ctrl+C可以停止预览”。我们不要按Ctrl+C，现在直接浏览器打开 http://locahost:4000/ 即可看到预览效果。 3.渲染并部署网站3.1 hexo g渲染生成网站现在我们文章已经写好，预览也比较满意。现在可以Ctrl+C停止预览，然后hexo g渲染出整套网站代码(你可以在../Blog/public/文件夹下看到整套网站的代码)。 渲染完成后，info提示信息:使用2.01秒生成了74个文件,这表示完成了渲染。 3.2 hexo d部署网站(把渲染好的html等网站文件，上传到Coding服务器)如图，除了黄色框框内的信息或许没有，其他都应该有。 最后一句INFO Deploy done: git表示部署已完成。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
